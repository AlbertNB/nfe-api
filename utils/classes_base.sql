-- MySQL Script generated by MySQL Workbench
-- 01/09/17 23:13:25
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema NFeApi_classes
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `NFeApi_classes` ;

-- -----------------------------------------------------
-- Schema NFeApi_classes
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `NFeApi_classes` DEFAULT CHARACTER SET utf8 ;
USE `NFeApi_classes` ;

-- -----------------------------------------------------
-- Table `Cliente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Cliente` ;

CREATE TABLE IF NOT EXISTS `Cliente` (
  `nome` VARCHAR(200) NOT NULL COMMENT 'Nome do destinatário[L:xNome]',
  `cpf` VARCHAR(11) NOT NULL COMMENT '[L:CNPJ]',
  `email` VARCHAR(100) NOT NULL COMMENT 'Informar o e-mail do destinatário. O campo pode ser utilizado para informar o e-mail de recepção da NF-e indicada pelo destinatário[L:email]',
  `indicador` ENUM('pagamento', 'isento', 'nenhum') NOT NULL DEFAULT 'self::INDICADOR_NENHUM' COMMENT 'Indicador da IE do destinatário:\n1 – Contribuinte ICMSpagamento à vista;\n2 – Contribuinte isento de inscrição;\n9 – Não Contribuinte[E:1|2|9][L:indIEDest][F:self::INDICADOR_NENHUM]')
ENGINE = InnoDB
COMMENT = 'Cliente pessoa física ou jurídica que está comprando os produtos e irá receber a nota fiscal[L:dest][H:Pessoa]';


-- -----------------------------------------------------
-- Table `Produto`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Produto` ;

CREATE TABLE IF NOT EXISTS `Produto` (
  `item` INT NULL COMMENT 'Número do Item do Pedido de Compra - Identificação do número do item do pedido de Compra[L:nItemPed]',
  `pedido` VARCHAR(45) NULL COMMENT 'informar o número do pedido de compra, o campo é de livre uso do emissor[L:xPed]',
  `codigo` VARCHAR(6) NOT NULL COMMENT 'Código do produto ou serviço. Preencher com CFOP caso se trate de itens não relacionados com mercadorias/produto e que o contribuinte não possua codificação própria\nFormato ”CFOP9999”.[L:cProd]',
  `codigo_tributario` VARCHAR(60) NOT NULL COMMENT 'Código do produto ou serviço. Preencher com CFOP caso se trate de itens não relacionados com mercadorias/produto e que o contribuinte não possua codificação própria\nFormato ”CFOP9999”.[L:cEANTrib]',
  `codigo_barras` VARCHAR(14) NOT NULL COMMENT 'GTIN (Global Trade Item Number) do produto, antigo código EAN ou código de barras[L:cEAN]',
  `descricao` VARCHAR(120) NOT NULL COMMENT 'Descrição do produto ou serviço[L:xProd]',
  `unidade` ENUM('unidade', 'peca', 'metro', 'grama', 'litro') NOT NULL DEFAULT 'self::UNIDADE_UNIDADE' COMMENT 'Unidade do produto, Não informar a grandeza[L:uCom][E:UN|PC|m|g|L][F:self::UNIDADE_UNIDADE]',
  `multiplicador` INT NOT NULL DEFAULT 1 COMMENT '[L:indTot][D][F:1]',
  `preco` DECIMAL(19,4) NOT NULL COMMENT 'Valor unitário de comercialização  - alterado para aceitar 0 a 10 casas decimais e 11 inteiros[L:vProd]',
  `quantidade` DOUBLE NOT NULL COMMENT 'Quantidade Comercial  do produto, alterado para aceitar de 0 a 4 casas decimais e 11 inteiros.[L:qCom]',
  `tributada` DOUBLE NOT NULL COMMENT 'Informa a quantidade tributada[L:qTrib]',
  `peso` INT NOT NULL DEFAULT 'new Peso()' COMMENT '[F:new Peso()][S]',
  `desconto` DECIMAL(19,4) NULL COMMENT 'Valor do Desconto[L:vDesc]',
  `seguro` DECIMAL(19,4) NULL COMMENT 'informar o valor do Seguro, o Seguro deve ser rateado entre os itens de produto[L:vSeg]',
  `frete` DECIMAL(19,4) NULL COMMENT 'informar o valor do Frete, o Frete deve ser rateado entre os itens de produto.[L:vFrete]',
  `despesas` DECIMAL(19,4) NULL COMMENT 'informar o valor de outras despesas acessórias do item de produto ou serviço[L:vOutro]',
  `excecao` VARCHAR(45) NULL COMMENT 'Código EX TIPI[L:EXTIPI]',
  `cfop` INT NOT NULL COMMENT '[L:CFOP]',
  `ncm` VARCHAR(8) NOT NULL COMMENT 'Código NCM (8 posições), será permitida a informação do gênero (posição do capítulo do NCM) quando a operação não for de comércio exterior (importação/exportação) ou o produto não seja tributado pelo IPI. Em caso de item de serviço ou item que não tenham produto (Ex. transferência de crédito, crédito do ativo imobilizado, etc.), informar o código 00 (zeros) (v2.0)[L:NCM]',
  `cest` VARCHAR(20) NULL COMMENT '[L:CEST]',
  `impostos` VARCHAR(20) NOT NULL DEFAULT 'array()' COMMENT '[D][F:array()][S:S][U:impostos|imposto][L:imposto]')
ENGINE = InnoDB
COMMENT = 'Produto ou serviço que está sendo vendido ou prestado e será adicionado na nota fiscal[L:prod]';


-- -----------------------------------------------------
-- Table `Pessoa`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Pessoa` ;

CREATE TABLE IF NOT EXISTS `Pessoa` (
  `razao_social` VARCHAR(200) NOT NULL COMMENT 'Razão Social ou Nome[L:xNome]',
  `cnpj` VARCHAR(14) NOT NULL COMMENT 'Identificador da pessoa na receita[L:CNPJ]',
  `ie` VARCHAR(20) NOT NULL COMMENT 'Inscrição Estadual[L:IE]',
  `im` VARCHAR(20) NULL COMMENT 'Inscrição Municipal[L:IM]',
  `endereco` INT NOT NULL COMMENT 'Dados do endereço[L:enderEmit][S]',
  `telefone` VARCHAR(20) NULL COMMENT '[L:fone]')
ENGINE = InnoDB
COMMENT = 'Classe base para preenchimento de informações de pessoas físicas e empresas[L:emit]';


-- -----------------------------------------------------
-- Table `Endereco`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Endereco` ;

CREATE TABLE IF NOT EXISTS `Endereco` (
  `pais` VARCHAR(100) NOT NULL DEFAULT 'new Pais()' COMMENT '[L:xPais][S][F:new Pais(array(\'codigo\' => 1058, \'nome\' => \'Brasil\'))]',
  `cep` VARCHAR(8) NOT NULL COMMENT '[L:CEP]',
  `municipio` VARCHAR(200) NOT NULL DEFAULT 'new Municipio()' COMMENT '[L:xMun][S][F:new Municipio()]',
  `bairro` VARCHAR(200) NOT NULL COMMENT '[L:xBairro]',
  `logradouro` VARCHAR(200) NOT NULL COMMENT '[L:xLgr]',
  `numero` VARCHAR(20) NOT NULL COMMENT '[L:nro]',
  `complemento` VARCHAR(200) NULL COMMENT '[L:xCpl]')
COMMENT = 'Informação de endereço que será informado nos clientes e no emitente[L:enderEmit]';


-- -----------------------------------------------------
-- Table `NF`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `NF` ;

CREATE TABLE IF NOT EXISTS `NF` (
  `id` INT NOT NULL COMMENT '[L:Id]',
  `numero` VARCHAR(45) NOT NULL COMMENT 'Número do Documento Fiscal[L:nNF]',
  `emitente` VARCHAR(45) NOT NULL DEFAULT 'new Emitente()' COMMENT '[F:new Emitente()][S][L:emit]',
  `cliente` VARCHAR(45) NOT NULL DEFAULT 'new Cliente()' COMMENT '[F:new Cliente()][S][L:dest]',
  `produtos` VARCHAR(45) NOT NULL DEFAULT 'array()' COMMENT '[F:array()][S:S][U:produtos|produto][L:prod]',
  `transporte` VARCHAR(45) NOT NULL DEFAULT 'new Transporte()' COMMENT '[F:new Transporte()][S][L:transp]',
  `pagamentos` VARCHAR(45) NOT NULL DEFAULT 'array()' COMMENT '[F:array()][S:S][U:pagamentos|pagamento][L:pag]',
  `consulta_url` VARCHAR(200) NOT NULL,
  `data_movimentacao` DATETIME NOT NULL COMMENT 'Data e Hora da saída ou de entrada da mercadoria / produto[L:dhSaiEnt]',
  `data_contingencia` DATETIME NOT NULL COMMENT 'Informar a data e hora de entrada em contingência[L:dhCont]',
  `justificativa` VARCHAR(45) NOT NULL COMMENT 'Informar a Justificativa da entrada em contingência[L:xJust]',
  `modelo` INT NOT NULL COMMENT '[L:mod]',
  `tipo` ENUM('entrada', 'saida') NOT NULL DEFAULT 'self::TIPO_SAIDA' COMMENT 'Tipo do Documento Fiscal (0 - entrada; 1 - saída)[E:0|1][F:self::TIPO_SAIDA][L:tpNF]',
  `destino` ENUM('interna', 'interestadual', 'exterior') NOT NULL DEFAULT 'self::DESTINO_INTERNA' COMMENT 'Identificador de Local de destino da operação (1-Interna;2-Interestadual;3-Exterior)[E:1|2|3][F:self::DESTINO_INTERNA][L:idDest]',
  `natureza` VARCHAR(60) NOT NULL DEFAULT 'VENDA PARA CONSUMIDOR FINAL' COMMENT 'Descrição da Natureza da Operação[L:natOp][F:\'VENDA PARA CONSUMIDOR FINAL\']',
  `codigo` VARCHAR(8) NOT NULL COMMENT 'Código numérico que compõe a Chave de Acesso. Número aleatório gerado pelo emitente para cada NF-e.[L:cNF]',
  `indicador` ENUM('avista', 'aprazo', 'outros') NOT NULL DEFAULT 'self::INDICADOR_AVISTA' COMMENT 'Indicador da forma de pagamento: 0 – pagamento à vista; 1 – pagamento à prazo; 2 – outros.[E:0|1|2][F:self::INDICADOR_AVISTA][L:indPag]',
  `data_emissao` DATETIME NOT NULL COMMENT 'Data e Hora de emissão do Documento Fiscal[L:dhEmi]',
  `serie` VARCHAR(45) NOT NULL COMMENT 'Série do Documento Fiscal: série normal 0-889, Avulsa Fisco 890-899, SCAN 900-999[L:serie]',
  `formato` ENUM('nenhuma', 'retrato', 'paisagem', 'simplificado', 'consumidor', 'mensagem') NOT NULL DEFAULT 'self::FORMATO_NENHUMA' COMMENT 'Formato de impressão do DANFE (0-sem DANFE;1-DANFe Retrato; 2-DANFe Paisagem;3-DANFe Simplificado;4-DANFe NFC-e;5-DANFe NFC-e em mensagem eletrônica)[E:0|1|2|3|4|5][F:self::FORMATO_NENHUMA][L:tpImp]',
  `emissao` ENUM('normal', 'contingencia') NOT NULL DEFAULT 'self::EMISSAO_NORMAL' COMMENT 'Forma de emissão da NF-e[E:1|9][F:self::EMISSAO_NORMAL][L:tpEmis]',
  `digito_verificador` VARCHAR(1) NOT NULL COMMENT 'Digito Verificador da Chave de Acesso da NF-e[L:cDV]',
  `ambiente` ENUM('producao', 'homologacao') NOT NULL DEFAULT 'self::AMBIENTE_HOMOLOGACAO' COMMENT 'Identificação do Ambiente: 1 - Produção, 2 - Homologação[E:1|2][F:self::AMBIENTE_HOMOLOGACAO][L:tpAmb]',
  `finalidade` ENUM('normal', 'complementar', 'ajuste', 'retorno') NOT NULL DEFAULT 'self::FINALIDADE_NORMAL' COMMENT 'Finalidade da emissão da NF-e: 1 - NFe normal, 2 - NFe complementar, 3 - NFe de ajuste, 4 - Devolução/Retorno[E:1|2|3|4][F:self::FINALIDADE_NORMAL][L:finNFe]',
  `consumidor_final` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Indica operação com consumidor final (0-Não;1-Consumidor Final)[E:1|0][F:\'Y\'][L:indFinal]',
  `presenca` ENUM('nenhum', 'presencial', 'internet', 'teleatendimento', 'entrega', 'outros') NOT NULL COMMENT 'Indicador de presença do comprador no estabelecimento comercial no momento da oepração (0-Não se aplica, ex.: Nota Fiscal complementar ou de ajuste;1-Operação presencial;2-Não presencial, internet;3-Não presencial, teleatendimento;4-NFC-e entrega em domicílio;9-Não presencial, outros)[E:0|1|2|3|4|9][L:indPres]',
  `protocolo` VARCHAR(45) NULL COMMENT '[S][L:protNFe]')
ENGINE = InnoDB
COMMENT = 'Classe base para a formação da nota fiscal[L:infNFe]';


-- -----------------------------------------------------
-- Table `NFCe`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `NFCe` ;

CREATE TABLE IF NOT EXISTS `NFCe` (
)
ENGINE = InnoDB
COMMENT = 'Classe para validação da nota fiscal eletrônica do consumidor[H:NF]';


-- -----------------------------------------------------
-- Table `NFe`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `NFe` ;

CREATE TABLE IF NOT EXISTS `NFe` (
)
ENGINE = InnoDB
COMMENT = 'Classe para validação da nota fiscal eletrônica[H:NF]';


-- -----------------------------------------------------
-- Table `Emitente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Emitente` ;

CREATE TABLE IF NOT EXISTS `Emitente` (
  `fantasia` VARCHAR(200) NULL COMMENT 'Nome fantasia do da empresa emitente[L:xFant]',
  `regime` ENUM('simples', 'excesso', 'normal') NOT NULL DEFAULT 'self::REGIME_SIMPLES' COMMENT 'Código de Regime Tributário. Este campo será obrigatoriamente preenchido com: 1 – Simples Nacional; 2 – Simples Nacional – excesso de sublimite de receita bruta; 3 – Regime Normal.[L:CRT][F:self::REGIME_SIMPLES][E:1|2|3]')
ENGINE = InnoDB
COMMENT = 'Empresa que irá emitir as notas fiscais[L:emit][H:Pessoa]';


-- -----------------------------------------------------
-- Table `SEFAZ`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SEFAZ` ;

CREATE TABLE IF NOT EXISTS `SEFAZ` (
  `notas` INT NOT NULL COMMENT '[D][F:array()][S:S][L:NFe][N:Notas|Nota]',
  `configuracao` VARCHAR(45) NOT NULL DEFAULT 'new Ajustes' COMMENT '[F:new Ajuste()][S]')
ENGINE = InnoDB
COMMENT = 'Classe que envia uma ou mais notas fiscais para os servidores da sefaz';


-- -----------------------------------------------------
-- Table `Pagamento`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Pagamento` ;

CREATE TABLE IF NOT EXISTS `Pagamento` (
  `forma` ENUM('dinheiro', 'cheque', 'credito', 'debito', 'crediario', 'alimentacao', 'refeicao', 'presente', 'combustivel', 'outros') NOT NULL COMMENT 'Forma de Pagamento:01-Dinheiro;02-Cheque;03-Cartão de Crédito;04-Cartão de Débito;05-Crédito Loja;10-Vale Alimentação;11-Vale Refeição;12-Vale Presente;13-Vale Combustível;99 - Outros[L:tPag][E:01|02|03|04|05|10|11|12|13|99]',
  `valor` DECIMAL(19,4) NOT NULL COMMENT 'Valor do Pagamento[L:vPag]',
  `integrado` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Tipo de Integração do processo de pagamento com o sistema de automação da empresa/1=Pagamento integrado com o sistema de automação da empresa Ex. equipamento TEF , Comercio Eletronico 2=Pagamento não integrado com o sistema de automação da empresa Ex: equipamento POS[L:tpIntegra][E:1|2][F:\'N\']',
  `credenciadora` VARCHAR(14) NOT NULL COMMENT 'CNPJ da credenciadora de cartão de crédito/débito[L:CNPJ]',
  `autorizacao` VARCHAR(100) NOT NULL COMMENT 'Número de autorização da operação cartão de crédito/débito[L:cAut]',
  `bandeira` ENUM('visa', 'mastercard', 'amex', 'sorocred', 'outros') NOT NULL COMMENT 'Bandeira da operadora de cartão de crédito/débito:01–Visa; 02–Mastercard; 03–American Express; 04–Sorocred; 99–Outros[L:tBand][E:01|02|03|04|99]')
ENGINE = InnoDB
COMMENT = '[L:pag]';


-- -----------------------------------------------------
-- Table `NFSe`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `NFSe` ;

CREATE TABLE IF NOT EXISTS `NFSe` (
)
ENGINE = InnoDB
COMMENT = 'Nota fiscal eletrônica de serviços[H:NF]';


-- -----------------------------------------------------
-- Table `Municipio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Municipio` ;

CREATE TABLE IF NOT EXISTS `Municipio` (
  `estado` VARCHAR(2) NOT NULL DEFAULT 'new Estado()' COMMENT '[L:UF][S][F:new Estado()]',
  `codigo` INT NOT NULL COMMENT 'Código do município (utilizar a tabela do IBGE), informar 9999999 para operações com o exterior.[L:cMun]',
  `nome` VARCHAR(200) NOT NULL COMMENT 'Nome do munícipio[L:xMun]')
ENGINE = InnoDB
COMMENT = '[L:municipio]';


-- -----------------------------------------------------
-- Table `Pais`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Pais` ;

CREATE TABLE IF NOT EXISTS `Pais` (
  `codigo` INT NOT NULL COMMENT 'Código do país[L:cPais]',
  `nome` VARCHAR(200) NOT NULL COMMENT 'Nome do país[L:xPais]')
ENGINE = InnoDB
COMMENT = '[L:pais]';


-- -----------------------------------------------------
-- Table `Imposto`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto` ;

CREATE TABLE IF NOT EXISTS `Imposto` (
  `tipo` ENUM('importado', 'nacional', 'estadual', 'municipal') NOT NULL COMMENT 'Tipo de imposto',
  `grupo` ENUM('icms', 'pis', 'cofins', 'ipi', 'ii', 'pisst', 'cofinsst', 'issqn', 'icmsufdest') NOT NULL COMMENT 'Grupo do imposto[E:ICMS|PIS|COFINS|IPI|II|PISST|COFINSST|ISSQN|ICMSUFDest]',
  `tributacao` VARCHAR(10) NOT NULL COMMENT 'Código da situação tributária[L:CST]',
  `aliquota` DOUBLE NOT NULL COMMENT 'Porcentagem do imposto',
  `base` DECIMAL(19,4) NOT NULL COMMENT 'Valor base para cálculo do imposto',
  `valor` DECIMAL(19,4) NOT NULL COMMENT 'Calcula o valor do imposto com base na aliquota e valor base',
  `total` DECIMAL(19,4) NOT NULL COMMENT 'Obtém o valor total do imposto')
ENGINE = InnoDB
COMMENT = 'Classe base dos impostos[L:imposto]';


-- -----------------------------------------------------
-- Table `Imposto.ICMS.Normal`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.ICMS.Normal` ;

CREATE TABLE IF NOT EXISTS `Imposto.ICMS.Normal` (
  `origem` ENUM('nacional', 'estrangeira', 'interno') NOT NULL DEFAULT 'self::ORIGEM_NACIONAL' COMMENT 'origem da mercadoria: 0 - Nacional \n1 - Estrangeira - Importação direta \n2 - Estrangeira - Adquirida no mercado interno[E:0|1|2][L:orig][F:self::ORIGEM_NACIONAL]',
  `modalidade` ENUM('agregado', 'pauta', 'tabelado', 'operacao') NOT NULL COMMENT '[L:modBC][E:0|1|2|3]')
ENGINE = InnoDB
COMMENT = 'Classe base do ICMS normal, estende de Imposto[L:ICMS][K:Imposto\\ICMS|Imposto\\ICMS\\][H:Imposto]';


-- -----------------------------------------------------
-- Table `Imposto.PIS.Aliquota`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.PIS.Aliquota` ;

CREATE TABLE IF NOT EXISTS `Imposto.PIS.Aliquota` (
  `tributacao` ENUM('normal', 'diferenciada') NOT NULL DEFAULT 'self::TRIBUTACAO_NORMAL' COMMENT '[E:01|02][L:CST][F:self::TRIBUTACAO_NORMAL]')
ENGINE = InnoDB
COMMENT = 'Aliquota do PIS[L:PISAliq][K:Imposto\\PIS|Imposto\\PIS\\][H:Imposto]';


-- -----------------------------------------------------
-- Table `Imposto.COFINS.Aliquota`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.COFINS.Aliquota` ;

CREATE TABLE IF NOT EXISTS `Imposto.COFINS.Aliquota` (
  `tributacao` ENUM('normal', 'diferenciada') NOT NULL DEFAULT 'self::TRIBUTACAO_NORMAL' COMMENT '[E:01|02][L:CST][F:self::TRIBUTACAO_NORMAL]')
ENGINE = InnoDB
COMMENT = '[L:COFINSAliq][K:Imposto\\COFINS|Imposto\\COFINS\\][H:Imposto]';


-- -----------------------------------------------------
-- Table `Imposto.IPI`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.IPI` ;

CREATE TABLE IF NOT EXISTS `Imposto.IPI` (
  `classe` VARCHAR(5) NULL COMMENT 'classe de enquadramento do IPI para Cigarros e Bebidas conforme Atos Normativos editados pela Receita Federal do Brasil.[L:clEnq]',
  `cnpj` VARCHAR(14) NULL COMMENT 'CNPJ do produtor da mercadoria, quando diferente do emitente nas exportações direta ou indireta.[L:CNPJProd]',
  `selo` VARCHAR(60) NULL COMMENT 'código do Selo de Controle do IPI conforme Atos Normativos editados pela Receita Federal do Brasil.[L:cSelo]',
  `quantidade` DOUBLE NULL COMMENT 'quantidade de Selo de Controle do IPI utilizados.[L:qSelo]',
  `enquadramento` VARCHAR(3) NOT NULL DEFAULT '999' COMMENT 'Código de Enquadramento Legal do IPI, informar 999 enquanto a tabela não tiver sido criada pela Receita Federal do Brasil[L:cEnq][F:\'999\']',
  `tributo` VARCHAR(45) NOT NULL COMMENT '[S]')
ENGINE = InnoDB
COMMENT = 'Este grupo só precisa ser informado por emissores que sejam contribuintes do IPI ou em uma operação de importação que tenha incidência de IPI[L:IPI][K:Imposto|Imposto\\][H:Imposto]';


-- -----------------------------------------------------
-- Table `Imposto.PIS.Quantidade`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.PIS.Quantidade` ;

CREATE TABLE IF NOT EXISTS `Imposto.PIS.Quantidade` (
  `quantidade` DOUBLE NOT NULL COMMENT '[L:qBCProd]')
ENGINE = InnoDB
COMMENT = 'Quantidade Vendida x Alíquota por Unidade de Produto[L:PISQtde][K:Imposto\\PIS|Imposto\\PIS\\][H:Imposto]';


-- -----------------------------------------------------
-- Table `Imposto.PIS.Isento`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.PIS.Isento` ;

CREATE TABLE IF NOT EXISTS `Imposto.PIS.Isento` (
  `tributacao` ENUM('monofasica', 'zero', 'isenta', 'incidencia', 'suspensao') NOT NULL COMMENT 'Código de Situação Tributária do PIS.\n04 - Operação Tributável - Tributação Monofásica - (Alíquota Zero);\n06 - Operação Tributável - Alíquota Zero;\n07 - Operação Isenta da contribuição;\n08 - Operação Sem Incidência da contribuição;\n09 - Operação com suspensão da contribuição;\n[E:04|06|07|08|09][L:CST]')
ENGINE = InnoDB
COMMENT = 'PIS não tributado[L:PISNT][K:Imposto\\PIS|Imposto\\PIS\\][H:Imposto]';


-- -----------------------------------------------------
-- Table `Imposto.PIS.Generico`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.PIS.Generico` ;

CREATE TABLE IF NOT EXISTS `Imposto.PIS.Generico` (
  `valor` DECIMAL(19,4) NOT NULL COMMENT '[L:vPIS]')
ENGINE = InnoDB
COMMENT = 'PIS para Outras Operações[L:PISOutr][K:Imposto\\PIS|Imposto\\PIS\\][H:Imposto]';


-- -----------------------------------------------------
-- Table `Imposto.COFINS.Generico`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.COFINS.Generico` ;

CREATE TABLE IF NOT EXISTS `Imposto.COFINS.Generico` (
  `valor` DECIMAL(19,4) NOT NULL COMMENT '[L:vPIS]')
ENGINE = InnoDB
COMMENT = 'PIS para Outras Operações[L:PISOutr][K:Imposto\\COFINS|Imposto\\COFINS\\][H:Imposto]';


-- -----------------------------------------------------
-- Table `Imposto.COFINS.Isento`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.COFINS.Isento` ;

CREATE TABLE IF NOT EXISTS `Imposto.COFINS.Isento` (
  `tributacao` ENUM('monofasica', 'st', 'zero', 'isenta', 'incidencia', 'suspensao') NOT NULL COMMENT 'Código de Situação Tributária do COFINS:\n04 - Operação Tributável - Tributação Monofásica - (Alíquota Zero);\n05 - Operação Tributável (ST);\n06 - Operação Tributável - Alíquota Zero;\n07 - Operação Isenta da contribuição;\n08 - Operação Sem Incidência da contribuição;\n09 - Operação com suspensão da contribuição;\n[E:04|05|06|07|08|09][L:CST]')
ENGINE = InnoDB
COMMENT = 'PIS não tributado[L:PISNT][K:Imposto\\COFINS|Imposto\\COFINS\\][H:Imposto]';


-- -----------------------------------------------------
-- Table `Imposto.COFINS.Quantidade`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.COFINS.Quantidade` ;

CREATE TABLE IF NOT EXISTS `Imposto.COFINS.Quantidade` (
  `quantidade` DOUBLE NOT NULL COMMENT '[L:qBCProd]')
ENGINE = InnoDB
COMMENT = 'Quantidade Vendida x Alíquota por Unidade de Produto[L:PISQtde][K:Imposto\\COFINS|Imposto\\COFINS\\][H:Imposto]';


-- -----------------------------------------------------
-- Table `Imposto.ICMS.Integral`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.ICMS.Integral` ;

CREATE TABLE IF NOT EXISTS `Imposto.ICMS.Integral` (
)
ENGINE = InnoDB
COMMENT = 'Tributação pelo ICMS\n00 - Tributada integralmente, estende de Normal[L:ICMS00][K:Imposto\\ICMS|Imposto\\ICMS\\][H:Normal]';


-- -----------------------------------------------------
-- Table `Imposto.ICMS.Parcial`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.ICMS.Parcial` ;

CREATE TABLE IF NOT EXISTS `Imposto.ICMS.Parcial` (
  `origem` ENUM('nacional', 'estrangeira', 'interno') NOT NULL DEFAULT 'self::ORIGEM_NACIONAL' COMMENT 'origem da mercadoria: 0 - Nacional \n1 - Estrangeira - Importação direta \n2 - Estrangeira - Adquirida no mercado interno[E:0|1|2][L:orig][F:self::ORIGEM_NACIONAL]',
  `modalidade` ENUM('tabelado', 'negativo', 'positivo', 'neutro', 'agregado', 'pauta') NOT NULL COMMENT 'Modalidade de determinação da BC do ICMS ST:\n0 – Preço tabelado ou máximo  sugerido;\n1 - Lista Negativa (valor);\n2 - Lista Positiva (valor);\n3 - Lista Neutra (valor);\n4 - Margem Valor Agregado (%);\n5 - Pauta (valor).[E:0|1|2|3|4|5][L:modBCST]',
  `margem` DOUBLE NOT NULL COMMENT '[L:pMVAST]',
  `reducao` DOUBLE NOT NULL COMMENT '[L:pRedBCST]')
ENGINE = InnoDB
COMMENT = 'Tributação pelo ICMS\n30 - Isenta ou não tributada e com cobrança do ICMS por substituição tributária, estende de Imposto[L:IMCS30][K:Imposto\\ICMS|Imposto\\ICMS\\][H:Imposto]';


-- -----------------------------------------------------
-- Table `Imposto.ICMS.Cobranca`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.ICMS.Cobranca` ;

CREATE TABLE IF NOT EXISTS `Imposto.ICMS.Cobranca` (
  `normal` VARCHAR(25) NOT NULL DEFAULT 'new Normal()' COMMENT '[F:new Normal()][S]')
ENGINE = InnoDB
COMMENT = 'Tributação pelo ICMS\n10 - Tributada e com cobrança do ICMS por substituição tributária, estende de Parcial[L:ICMS10][K:Imposto\\ICMS|Imposto\\ICMS\\][H:Parcial]';


-- -----------------------------------------------------
-- Table `Imposto.ICMS.Reducao`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.ICMS.Reducao` ;

CREATE TABLE IF NOT EXISTS `Imposto.ICMS.Reducao` (
  `reducao` DOUBLE NOT NULL COMMENT '[L:pRedBC]')
ENGINE = InnoDB
COMMENT = 'Tributção pelo ICMS\n20 - Com redução de base de cálculo, estende de Normal[L:ICMS20][K:Imposto\\ICMS|Imposto\\ICMS\\][H:Normal]';


-- -----------------------------------------------------
-- Table `Imposto.ICMS.Isento`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.ICMS.Isento` ;

CREATE TABLE IF NOT EXISTS `Imposto.ICMS.Isento` (
  `desoneracao` DECIMAL(19,4) NULL COMMENT 'O valor do ICMS será informado apenas nas operações com veículos beneficiados com a desoneração condicional do ICMS.[L:vICMSDeson]',
  `motivo` ENUM('taxi', 'produtor', 'locadora', 'consular', 'contran', 'suframa', 'venda', 'outros', 'condutor', 'deficiente', 'olimpiadas') NULL COMMENT 'Informar o motivo da desoneração:\n1 – Táxi;\n3 – Produtor Agropecuário;\n4 – Frotista/Locadora;\n5 – Diplomático/Consular;\n6 – Utilitários e Motocicletas da Amazônia Ocidental e Áreas de Livre Comércio (Resolução 714/88 e 790/94 – CONTRAN e suas alterações);\n7 – SUFRAMA;\n8 - Venda a órgão Público;\n9 – Outros\n10- Deficiente Condutor\n11- Deficiente não condutor\n16 - Olimpíadas Rio 2016[L:motDesICMS][E:1|3|4|5|6|7|8|9|10|11|16]')
ENGINE = InnoDB
COMMENT = 'Tributação pelo ICMS\n40 - Isenta \n41 - Não tributada \n50 - Suspensão, estende de Generico[L:ICMS40][K:Imposto\\ICMS|Imposto\\ICMS\\][H:Generico]';


-- -----------------------------------------------------
-- Table `Imposto.ICMS.Diferido`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.ICMS.Diferido` ;

CREATE TABLE IF NOT EXISTS `Imposto.ICMS.Diferido` (
  `operacao` DECIMAL(19,4) NOT NULL COMMENT 'Valor do ICMS da Operação[L:vICMSOp]',
  `diferimento` DOUBLE NOT NULL COMMENT 'Percentual do diferemento[L:pDif]',
  `diferido` DECIMAL(19,4) NOT NULL COMMENT 'Valor do ICMS da diferido[L:vICMSDif]')
ENGINE = InnoDB
COMMENT = 'Tributção pelo ICMS\n51 - Diferimento\nA exigência do preenchimento das informações do ICMS diferido fica à critério de cada UF, estende de Reducao[L:ICMS51][K:Imposto\\ICMS|Imposto\\ICMS\\][H:Reducao]';


-- -----------------------------------------------------
-- Table `Imposto.ICMS.Cobrado`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.ICMS.Cobrado` ;

CREATE TABLE IF NOT EXISTS `Imposto.ICMS.Cobrado` (
  `valor` DECIMAL(19,4) NOT NULL COMMENT '[L:vICMSSTRet]')
ENGINE = InnoDB
COMMENT = 'Tributação pelo ICMS\n60 - ICMS cobrado anteriormente por substituição tributária[L:ICMS60][K:Imposto\\ICMS|Imposto\\ICMS\\][H:Generico]';


-- -----------------------------------------------------
-- Table `Imposto.ICMS.Mista`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.ICMS.Mista` ;

CREATE TABLE IF NOT EXISTS `Imposto.ICMS.Mista` (
)
ENGINE = InnoDB
COMMENT = 'Tributação pelo ICMS \n70 - Com redução de base de cálculo e cobrança do ICMS por substituição tributária, estende de Cobranca[L:ICMS70][K:Imposto\\ICMS|Imposto\\ICMS\\][H:Cobranca]';


-- -----------------------------------------------------
-- Table `Imposto.ICMS.Generico`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.ICMS.Generico` ;

CREATE TABLE IF NOT EXISTS `Imposto.ICMS.Generico` (
)
ENGINE = InnoDB
COMMENT = 'Tributação pelo ICMS\n90 - Outras, estende de Normal[L:ICMS90][K:Imposto\\ICMS|Imposto\\ICMS\\][H:Mista]';


-- -----------------------------------------------------
-- Table `Peso`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Peso` ;

CREATE TABLE IF NOT EXISTS `Peso` (
  `liquido` DOUBLE NOT NULL COMMENT '[E:pesoL]',
  `bruto` DOUBLE NOT NULL COMMENT '[E:pesoB]')
ENGINE = InnoDB
COMMENT = 'Peso de um produto, utilizado no cálculo do frete';


-- -----------------------------------------------------
-- Table `BD.Banco`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BD.Banco` ;

CREATE TABLE IF NOT EXISTS `BD.Banco` (
  `codigo_estado` VARCHAR(45) NOT NULL COMMENT 'Obtém o código IBGE do estado[S]',
  `imposto_aliquota` VARCHAR(45) NOT NULL COMMENT 'Obtém a aliquota do imposto de acordo com o tipo[S]',
  `codigo_municipio` VARCHAR(45) NOT NULL COMMENT 'Obtém o código IBGE do município[S]',
  `notas_pendentes` VARCHAR(45) NOT NULL COMMENT 'Obtém as notas pendentes de envio[S]',
  `informacao_servico` VARCHAR(45) NOT NULL COMMENT '[S]')
ENGINE = InnoDB
COMMENT = '[K:BD|BD\\]';


-- -----------------------------------------------------
-- Table `BD.Estatico`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BD.Estatico` ;

CREATE TABLE IF NOT EXISTS `BD.Estatico` (
  `ibpt` VARCHAR(45) NOT NULL DEFAULT 'new IBPT()' COMMENT '[F:new IBPT()][S]',
  `codigo_estado` VARCHAR(45) NOT NULL COMMENT 'Obtém o código IBGE do estado[S]',
  `imposto_aliquota` VARCHAR(45) NOT NULL COMMENT 'Obtém a aliquota do imposto de acordo com o tipo[S]',
  `codigo_municipio` VARCHAR(45) NOT NULL COMMENT 'Obtém o código IBGE do município[S]',
  `notas_pendentes` VARCHAR(45) NOT NULL COMMENT 'Obtém as notas pendentes de envio[S]',
  `informacao_servico` VARCHAR(45) NOT NULL COMMENT '[S]')
ENGINE = InnoDB
COMMENT = '[K:BD|BD\\][H:Banco]';


-- -----------------------------------------------------
-- Table `Configuracao`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Configuracao` ;

CREATE TABLE IF NOT EXISTS `Configuracao` (
  `banco` VARCHAR(45) NOT NULL DEFAULT 'new \\BD\\Estatico()' COMMENT '[S][F:new \\BD\\Estatico()]',
  `emitente` VARCHAR(45) NOT NULL DEFAULT 'new Emitente()' COMMENT 'Emitente da nota fiscal[S][F:new Emitente()]',
  `evento` VARCHAR(45) NULL COMMENT '[S]',
  `chave_publica` VARCHAR(45) NOT NULL COMMENT '[S]',
  `chave_privada` VARCHAR(45) NOT NULL COMMENT '[S]',
  `token` VARCHAR(45) NOT NULL COMMENT '[S]',
  `csc` VARCHAR(45) NOT NULL COMMENT '[S]',
  `token_ibpt` VARCHAR(45) NOT NULL COMMENT '[S]')
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Evento`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Evento` ;

CREATE TABLE IF NOT EXISTS `Evento` (
  `on_nota_gerada` VARCHAR(45) NOT NULL COMMENT 'Chamado quando o XML da nota foi gerado[S]',
  `on_nota_assinada` VARCHAR(45) NOT NULL COMMENT 'Chamado após o XML da nota ser assinado[S]',
  `on_nota_enviando` VARCHAR(45) NOT NULL COMMENT 'Chamado antes de enviar a nota para a SEFAZ[S]',
  `on_nota_contingencia` VARCHAR(45) NOT NULL COMMENT 'Chamado quando a forma de emissão da nota fiscal muda para contigência[S]',
  `on_nota_enviada` VARCHAR(45) NOT NULL COMMENT 'Chamado quando a nota foi enviada e aceita pela SEFAZ[S]',
  `on_nota_completo` VARCHAR(45) NOT NULL COMMENT 'Chamado quando a emissão da nota foi concluída com sucesso independente da forma de emissão[S]',
  `on_nota_erro` VARCHAR(45) NOT NULL COMMENT 'Chamado quando ocorre um erro nas etapas de geração e envio da nota (Não é chamado quando entra em contigência)[S]',
  `on_inutilizado` VARCHAR(45) NOT NULL COMMENT 'Chamado quando um ou mais números de notas forem inutilizados[S]')
ENGINE = InnoDB
COMMENT = 'Evento de emissão de nota fiscal eletrônica';


-- -----------------------------------------------------
-- Table `IBPT`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IBPT` ;

CREATE TABLE IF NOT EXISTS `IBPT` (
  `imposto` DECIMAL(19,4) NOT NULL COMMENT '[S]')
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Ajuste`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Ajuste` ;

CREATE TABLE IF NOT EXISTS `Ajuste` (
  `chave_publica` VARCHAR(45) NOT NULL COMMENT '[S]',
  `chave_privada` VARCHAR(45) NOT NULL COMMENT '[S]',
  `arquivo_chave_publica` VARCHAR(45) NOT NULL COMMENT '[S]',
  `arquivo_chave_privada` VARCHAR(45) NOT NULL COMMENT '[S]',
  `pasta_xml_inutilizado` VARCHAR(45) NOT NULL COMMENT 'Pasta onde ficam os XML das inutilizações de números de notas[S]',
  `pasta_xml_cancelado` VARCHAR(45) NOT NULL COMMENT 'Pasta onde ficam os XML das notas após serem aceitas e depois canceladas[S]',
  `pasta_xml_pendente` VARCHAR(45) NOT NULL COMMENT 'Pasta onde ficam os XML das notas pendentes[S]',
  `pasta_xml_denegado` VARCHAR(45) NOT NULL COMMENT 'Pasta onde ficam os XMLs após enviados e denegados[S]',
  `pasta_xml_rejeitado` VARCHAR(45) NOT NULL COMMENT 'Pasta onde ficam os XML das notas após serem enviadas e rejeitadas[S]',
  `pasta_xml_autorizado` VARCHAR(45) NOT NULL COMMENT 'Pasta onde ficam os XML das notas após serem enviados e aceitos pela SEFAZ[S]',
  `pasta_xml_processamento` VARCHAR(45) NOT NULL COMMENT 'Pasta onde ficam os XMLs em processamento de retorno de autorização[S]',
  `pasta_xml_assinado` VARCHAR(45) NOT NULL COMMENT 'Pasta onde ficam os XMLs após assinado e antes de serem enviados[S]',
  `token` VARCHAR(45) NOT NULL COMMENT '[S]',
  `csc` VARCHAR(45) NOT NULL COMMENT '[S]',
  `token_ibpt` VARCHAR(45) NOT NULL COMMENT '[S]')
ENGINE = InnoDB
COMMENT = 'Configurações padrão para emissão de nota fiscal[H:Configuracao]';


-- -----------------------------------------------------
-- Table `Estado`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Estado` ;

CREATE TABLE IF NOT EXISTS `Estado` (
  `codigo` INT NOT NULL COMMENT 'Código do estado (utilizar a tabela do IBGE)[L:cUF]',
  `nome` VARCHAR(200) NULL COMMENT 'Nome do estado (Opcional)',
  `uf` VARCHAR(2) NOT NULL COMMENT 'Sigla do estado[L:UF]')
ENGINE = InnoDB
COMMENT = '[L:municipio]';


-- -----------------------------------------------------
-- Table `Imposto.Total`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.Total` ;

CREATE TABLE IF NOT EXISTS `Imposto.Total` (
)
ENGINE = InnoDB
COMMENT = 'Permite calcular o imposto com base na tabela IBPT[L:vTotTrib][K:Imposto|Imposto\\][H:Imposto]';


-- -----------------------------------------------------
-- Table `Transporte`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Transporte` ;

CREATE TABLE IF NOT EXISTS `Transporte` (
  `frete` ENUM('emitente', 'destinatario', 'terceiros', 'nenhum') NOT NULL DEFAULT 'self::FRETE_NENHUM' COMMENT 'Modalidade do frete\n0- Por conta do emitente;\n1- Por conta do destinatário/remetente;\n2- Por conta de terceiros;\n9- Sem frete (v2.0)[E:0|1|2|9][L:modFrete][F:self::FRETE_NENHUM]',
  `transportador` VARCHAR(45) NULL DEFAULT 'new \\Transporte\\Transportador()' COMMENT 'Dados da transportadora[L:transporta][F:new \\Transporte\\Transportador()][S]',
  `veiculo` VARCHAR(45) NULL DEFAULT 'new \\Transporte\\Veiculo()' COMMENT '[L:veicTransp][S][F:new \\Transporte\\Veiculo()][S]',
  `reboque` VARCHAR(45) NULL DEFAULT 'new \\Transporte\\Veiculo()' COMMENT '[L:reboque][S][F:new \\Transporte\\Veiculo()][S]',
  `volume` VARCHAR(45) NULL DEFAULT 'new Volume()' COMMENT '[F:new Volume()][S][L:vol][S]')
ENGINE = InnoDB
COMMENT = 'Dados dos transportes da NF-e[L:transp]';


-- -----------------------------------------------------
-- Table `Transporte.Transportador`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Transporte.Transportador` ;

CREATE TABLE IF NOT EXISTS `Transporte.Transportador` (
)
ENGINE = InnoDB
COMMENT = 'Dados da transportadora[H:Cliente][L:transporta][K:Transporte|Transporte\\]';


-- -----------------------------------------------------
-- Table `Transporte.Tributo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Transporte.Tributo` ;

CREATE TABLE IF NOT EXISTS `Transporte.Tributo` (
  `servico` DECIMAL(19,4) NOT NULL COMMENT '[L:vServ]',
  `cfop` VARCHAR(45) NOT NULL COMMENT '[L:CFOP]',
  `municipio` VARCHAR(45) NULL DEFAULT 'new Municipio()' COMMENT '[L:cMunFG][S][F:new Municipio()]')
ENGINE = InnoDB
COMMENT = 'ICMS retido do Transportador[L:retTransp][H:Imposto][K:Transporte|Transporte\\]';


-- -----------------------------------------------------
-- Table `Transporte.Veiculo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Transporte.Veiculo` ;

CREATE TABLE IF NOT EXISTS `Transporte.Veiculo` (
  `placa` VARCHAR(20) NOT NULL COMMENT '[L:placa]',
  `uf` VARCHAR(2) NOT NULL COMMENT '[L:UF]',
  `rntc` VARCHAR(45) NULL COMMENT '[L:RNTC]')
ENGINE = InnoDB
COMMENT = '[K:Transporte|Transporte\\][L:veicTransp]';


-- -----------------------------------------------------
-- Table `Volume`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Volume` ;

CREATE TABLE IF NOT EXISTS `Volume` (
  `quantidade` INT NULL COMMENT '[L:qVol]',
  `especie` VARCHAR(45) NULL COMMENT '[L:esp]',
  `marca` VARCHAR(45) NULL COMMENT '[L:marca]',
  `numeracoes` VARCHAR(45) NULL DEFAULT 'array()' COMMENT '[F:array()][S:S][U:numeracoes|numeracao][L:nVol]',
  `peso` VARCHAR(45) NULL DEFAULT 'new Peso()' COMMENT '[F:new Peso()][L:pesoLB][S]',
  `lacres` VARCHAR(45) NULL DEFAULT 'array()' COMMENT '[F:array()][S:S][L:lacres][U:lacres|lacre]')
ENGINE = InnoDB
COMMENT = '[L:vol]';


-- -----------------------------------------------------
-- Table `Lacre`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Lacre` ;

CREATE TABLE IF NOT EXISTS `Lacre` (
  `numero` INT NOT NULL COMMENT '[L:nLacre]')
ENGINE = InnoDB
COMMENT = '[L:lacres]';


-- -----------------------------------------------------
-- Table `Imposto.IPI.Aliquota`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.IPI.Aliquota` ;

CREATE TABLE IF NOT EXISTS `Imposto.IPI.Aliquota` (
  `tributacao` ENUM('credito', 'entrada', 'tributada', 'saida') NOT NULL DEFAULT 'self::TRIBUTACAO_TRIBUTADA' COMMENT 'Código da Situação Tributária do IPI:\n00-Entrada com recuperação de crédito\n49 - Outras entradas\n50-Saída tributada\n99-Outras saídas[E:00|49|50|99][L:CST][F:self::TRIBUTACAO_TRIBUTADA]')
ENGINE = InnoDB
COMMENT = '[L:IPITrib][K:Imposto\\IPI|Imposto\\IPI\\][H:Imposto]';


-- -----------------------------------------------------
-- Table `Imposto.IPI.Quantidade`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.IPI.Quantidade` ;

CREATE TABLE IF NOT EXISTS `Imposto.IPI.Quantidade` (
  `quantidade` DOUBLE NOT NULL COMMENT '[L:qUnid]',
  `preco` DECIMAL(19,4) NOT NULL COMMENT '[L:vUnid]')
ENGINE = InnoDB
COMMENT = 'Quantidade x Preço por Unidade de Produto[L:IPITrib][K:Imposto\\IPI|Imposto\\IPI\\][H:Imposto]';


-- -----------------------------------------------------
-- Table `Imposto.IPI.Isento`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.IPI.Isento` ;

CREATE TABLE IF NOT EXISTS `Imposto.IPI.Isento` (
  `tributacao` VARCHAR(2) NOT NULL DEFAULT '01' COMMENT 'Código da Situação Tributária do IPI:\n01-Entrada tributada com alíquota zero\n02-Entrada isenta\n03-Entrada não-tributada\n04-Entrada imune\n05-Entrada com suspensão\n51-Saída tributada com alíquota zero\n52-Saída isenta\n53-Saída não-tributada\n54-Saída imune\n55-Saída com suspensão[L:CST][F:01]')
ENGINE = InnoDB
COMMENT = 'IPI não tributado[L:IPINT][K:Imposto\\IPI|Imposto\\IPI\\][H:Imposto]';


-- -----------------------------------------------------
-- Table `Imposto.II`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.II` ;

CREATE TABLE IF NOT EXISTS `Imposto.II` (
  `despesas` DECIMAL(19,4) NOT NULL COMMENT 'Informar o valor das despesas aduaneiras[L:vDespAdu]',
  `valor` DECIMAL(19,4) NOT NULL COMMENT 'Informar a o valor do Imposto de Importação[L:vII]',
  `iof` VARCHAR(45) NOT NULL COMMENT 'Informar o Valor do IOF - Imposto sobre Operações Financeiras[L:vIOF]')
ENGINE = InnoDB
COMMENT = 'Funcionalidade para gerar as informações do II do item de produto da NF-e. Este grupo só precisa ser informado em uma operação de importação que tenha incidência de II.[L:II][K:Imposto|Imposto\\][H:Imposto]';


-- -----------------------------------------------------
-- Table `Imposto.PISST.Aliquota`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.PISST.Aliquota` ;

CREATE TABLE IF NOT EXISTS `Imposto.PISST.Aliquota` (
)
ENGINE = InnoDB
COMMENT = 'Este grupo só deve ser informado se o produto for sujeito a PIS por ST, CST = 05, a informação deste grupo não desobriga a informação do grupo PIS.[L:PISST][K:Imposto\\PISST|Imposto\\PISST\\][H:PISAliquota]';


-- -----------------------------------------------------
-- Table `Imposto.PISST.Quantidade`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.PISST.Quantidade` ;

CREATE TABLE IF NOT EXISTS `Imposto.PISST.Quantidade` (
)
ENGINE = InnoDB
COMMENT = 'Quantidade Vendida x Alíquota por Unidade de Produto[L:PISST][K:Imposto\\PISST|Imposto\\PISST\\][H:PISQuantidade]';


-- -----------------------------------------------------
-- Table `Imposto.ICMS.Partilha`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.ICMS.Partilha` ;

CREATE TABLE IF NOT EXISTS `Imposto.ICMS.Partilha` (
  `operacao` DOUBLE NOT NULL COMMENT 'Percentual para determinação do valor  da Base de Cálculo da operação própria.[L:pBCOp]',
  `uf` VARCHAR(45) NOT NULL COMMENT 'Sigla da UF para qual é devido o ICMS ST da operação.[L:UFST]')
ENGINE = InnoDB
COMMENT = 'Partilha do ICMS entre a UF de origem e UF de destino ou a UF definida na legislação\nOperação interestadual para consumidor final com partilha do ICMS  devido na operação entre a UF de origem e a UF do destinatário ou ou a UF definida na legislação. (Ex. UF da concessionária de entrega do  veículos)[L:ICMSPart][K:Imposto\\ICMS|Imposto\\ICMS\\][H:Mista]';


-- -----------------------------------------------------
-- Table `Imposto.ICMS.Substituto`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.ICMS.Substituto` ;

CREATE TABLE IF NOT EXISTS `Imposto.ICMS.Substituto` (
)
ENGINE = InnoDB
COMMENT = 'Grupo de informação do ICMSST devido para a UF de destino, nas operações interestaduais de produtos que tiveram retenção antecipada de ICMS por ST na UF do remetente. Repasse via Substituto Tributário.[L:ICMSST][K:Imposto\\ICMS|Imposto\\ICMS\\][H:Cobrado]';


-- -----------------------------------------------------
-- Table `Imposto.ICMS.Simples.Generico`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.ICMS.Simples.Generico` ;

CREATE TABLE IF NOT EXISTS `Imposto.ICMS.Simples.Generico` (
)
ENGINE = InnoDB
COMMENT = 'Tributação do ICMS pelo SIMPLES NACIONAL, CRT=1 – Simples Nacional e CSOSN=900 (v2.0)[L:ICMSSN900][K:Imposto\\ICMS\\Simples|Imposto\\ICMS\\Simples\\][H:Cobranca]';


-- -----------------------------------------------------
-- Table `Imposto.ICMS.Simples.Cobranca`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.ICMS.Simples.Cobranca` ;

CREATE TABLE IF NOT EXISTS `Imposto.ICMS.Simples.Cobranca` (
  `normal` VARCHAR(25) NOT NULL DEFAULT 'new Normal()' COMMENT '[F:new Normal()][S]')
ENGINE = InnoDB
COMMENT = 'Tributada pelo Simples Nacional com permissão de crédito e com cobrança do ICMS por substituição tributária[L:ICMSSN201][K:Imposto\\ICMS\\Simples|Imposto\\ICMS\\Simples\\][H:Parcial]';


-- -----------------------------------------------------
-- Table `Imposto.ICMS.Simples.Parcial`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.ICMS.Simples.Parcial` ;

CREATE TABLE IF NOT EXISTS `Imposto.ICMS.Simples.Parcial` (
)
ENGINE = InnoDB
COMMENT = 'Tributada pelo Simples Nacional sem permissão de crédito e com cobrança do ICMS por substituição tributária[L:IMCSSN202][K:Imposto\\ICMS\\Simples|Imposto\\ICMS\\Simples\\][H:ICMSParcial]';


-- -----------------------------------------------------
-- Table `Imposto.ICMS.Simples.Cobrado`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.ICMS.Simples.Cobrado` ;

CREATE TABLE IF NOT EXISTS `Imposto.ICMS.Simples.Cobrado` (
  `valor` DECIMAL(19,4) NOT NULL COMMENT '[L:vICMSSTRet]')
ENGINE = InnoDB
COMMENT = 'ICMS cobrado anteriormente por substituição tributária (substituído) ou por antecipação[L:ICMSSN500][K:Imposto\\ICMS\\Simples|Imposto\\ICMS\\Simples\\][H:Generico]';


-- -----------------------------------------------------
-- Table `Imposto.ICMS.Simples.Normal`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.ICMS.Simples.Normal` ;

CREATE TABLE IF NOT EXISTS `Imposto.ICMS.Simples.Normal` (
)
ENGINE = InnoDB
COMMENT = 'Tributada pelo Simples Nacional com permissão de crédito[L:ICMSSN101][K:Imposto\\ICMS\\Simples|Imposto\\ICMS\\Simples\\][H:ICMSNormal]';


-- -----------------------------------------------------
-- Table `Imposto.ICMS.Simples.Isento`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.ICMS.Simples.Isento` ;

CREATE TABLE IF NOT EXISTS `Imposto.ICMS.Simples.Isento` (
)
ENGINE = InnoDB
COMMENT = 'Tributada pelo Simples Nacional sem permissão de crédito[L:ICMSSN102][K:Imposto\\ICMS\\Simples|Imposto\\ICMS\\Simples\\][H:Generico]';


-- -----------------------------------------------------
-- Table `Imposto.COFINSST.Aliquota`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.COFINSST.Aliquota` ;

CREATE TABLE IF NOT EXISTS `Imposto.COFINSST.Aliquota` (
)
ENGINE = InnoDB
COMMENT = 'Este grupo só deve ser informado se o produto for sujeito a COFINS por ST, CST = 05, a informação deste grupo não desobriga a informação do grupo COFINS.[L:COFINSST][K:Imposto\\COFINSST|Imposto\\COFINSST\\][H:COFINSAliquota]';


-- -----------------------------------------------------
-- Table `Imposto.COFINSST.Quantidade`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto.COFINSST.Quantidade` ;

CREATE TABLE IF NOT EXISTS `Imposto.COFINSST.Quantidade` (
)
ENGINE = InnoDB
COMMENT = 'Quantidade Vendida x Alíquota por Unidade de Produto[L:COFINSST][K:Imposto\\COFINSST|Imposto\\COFINSST\\][H:COFINSQuantidade]';


-- -----------------------------------------------------
-- Table `NF.Autorizacao`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `NF.Autorizacao` ;

CREATE TABLE IF NOT EXISTS `NF.Autorizacao` (
)
ENGINE = InnoDB
COMMENT = '[K:NF|NF\\][H:Retorno]';


-- -----------------------------------------------------
-- Table `NF.Protocolo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `NF.Protocolo` ;

CREATE TABLE IF NOT EXISTS `NF.Protocolo` (
  `chave` VARCHAR(45) NOT NULL COMMENT '[L:chNFe]',
  `validacao` VARCHAR(45) NOT NULL COMMENT '[L:digVal]')
ENGINE = InnoDB
COMMENT = '[K:NF|NF\\][H:Autorizacao][L:infProt]';


-- -----------------------------------------------------
-- Table `NF.Inutilizacao`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `NF.Inutilizacao` ;

CREATE TABLE IF NOT EXISTS `NF.Inutilizacao` (
  `id` VARCHAR(45) NOT NULL COMMENT 'Formado por:\nID = Literal    \n43 = Código Estado    \n15 = Ano    \n00000000000000 = CNPJ    \n55 = Modelo     \n001 = Série    \n000000411 = Número Inicial    \n000000411 = Número Final\n[L:infInut]',
  `ambiente` VARCHAR(45) NOT NULL COMMENT '[L:tpAmb]',
  `uf` VARCHAR(45) NOT NULL COMMENT '[L:cUF]',
  `ano` VARCHAR(45) NOT NULL COMMENT '[L:ano]',
  `cnpj` VARCHAR(45) NOT NULL COMMENT '[L:CNPJ]',
  `modelo` VARCHAR(45) NOT NULL COMMENT '[L:mod]',
  `serie` VARCHAR(45) NOT NULL COMMENT '[L:serie]',
  `inicio` INT NOT NULL COMMENT '[L:nNFIni]',
  `final` INT NOT NULL COMMENT '[L:nNFFin]',
  `justificativa` VARCHAR(45) NOT NULL COMMENT '[L:xJust]')
ENGINE = InnoDB
COMMENT = '[K:NF|NF\\][L:inutNFe][H:Retorno]';


-- -----------------------------------------------------
-- Table `NF.Evento`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `NF.Evento` ;

CREATE TABLE IF NOT EXISTS `NF.Evento` (
)
ENGINE = InnoDB
COMMENT = '[K:NF|NF\\][H:Retorno]';


-- -----------------------------------------------------
-- Table `NF.Status`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `NF.Status` ;

CREATE TABLE IF NOT EXISTS `NF.Status` (
  `ambiente` VARCHAR(45) NOT NULL COMMENT '[L:tpAmb]',
  `versao` VARCHAR(45) NOT NULL COMMENT '[L:verAplic]',
  `status` VARCHAR(45) NOT NULL COMMENT '[L:cStat]',
  `motivo` VARCHAR(45) NOT NULL COMMENT '[L:xMotivo]',
  `uf` VARCHAR(45) NULL COMMENT '[L:cUF]')
ENGINE = InnoDB
COMMENT = '[K:NF|NF\\]';


-- -----------------------------------------------------
-- Table `NF.Envio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `NF.Envio` ;

CREATE TABLE IF NOT EXISTS `NF.Envio` (
  `servico` ENUM('inutilizacao', 'protocolo', 'status', 'cadastro', 'evento', 'autorizacao', 'retorno') NOT NULL COMMENT '[E:NFeInutilizacao|NFeConsulta|NFeStatusServico|CadConsultaCadastro|NFeRecepcaoEvento|NFeAutorizacao|NFeRetAutorizacao]',
  `ambiente` VARCHAR(45) NOT NULL COMMENT '[S]',
  `modelo` VARCHAR(45) NOT NULL COMMENT '[S]',
  `emissao` VARCHAR(45) NOT NULL COMMENT '[S]',
  `conteudo` VARCHAR(45) NOT NULL COMMENT '[S]')
ENGINE = InnoDB
COMMENT = '[K:NF|NF\\][L:nfeDadosMsg]';


-- -----------------------------------------------------
-- Table `NF.Retorno`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `NF.Retorno` ;

CREATE TABLE IF NOT EXISTS `NF.Retorno` (
  `data_recebimento` DATETIME NULL COMMENT '[L:dhRecbto]',
  `numero` VARCHAR(45) NULL COMMENT '[L:nProt]')
ENGINE = InnoDB
COMMENT = '[K:NF|NF\\][H:Status]';


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
