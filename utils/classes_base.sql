-- MySQL Script generated by MySQL Workbench
-- 11/27/16 01:27:34
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema NFeApi_classes
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `NFeApi_classes` ;

-- -----------------------------------------------------
-- Schema NFeApi_classes
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `NFeApi_classes` DEFAULT CHARACTER SET utf8 ;
USE `NFeApi_classes` ;

-- -----------------------------------------------------
-- Table `Cliente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Cliente` ;

CREATE TABLE IF NOT EXISTS `Cliente` (
  `nome` VARCHAR(200) NOT NULL COMMENT 'Nome do destinatário[L:xNome]',
  `cpf` VARCHAR(11) NOT NULL COMMENT '[L:CNPJ]',
  `email` VARCHAR(100) NOT NULL COMMENT 'Informar o e-mail do destinatário. O campo pode ser utilizado para informar o e-mail de recepção da NF-e indicada pelo destinatário[L:email]')
ENGINE = InnoDB
COMMENT = 'Cliente pessoa física ou jurídica que está comprando os produtos e irá receber a nota fiscal[L:dest]';


-- -----------------------------------------------------
-- Table `Produto`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Produto` ;

CREATE TABLE IF NOT EXISTS `Produto` (
  `item` INT NOT NULL COMMENT 'Número do Item do Pedido de Compra - Identificação do número do item do pedido de Compra[L:nItemPed]',
  `codigo` VARCHAR(6) NOT NULL COMMENT 'Código do produto ou serviço. Preencher com CFOP caso se trate de itens não relacionados com mercadorias/produto e que o contribuinte não possua codificação própria\nFormato ”CFOP9999”.[L:cProd]',
  `codigo_tributario` VARCHAR(60) NOT NULL COMMENT 'Código do produto ou serviço. Preencher com CFOP caso se trate de itens não relacionados com mercadorias/produto e que o contribuinte não possua codificação própria\nFormato ”CFOP9999”.[L:cEANTrib]',
  `codigo_barras` VARCHAR(14) NOT NULL COMMENT 'GTIN (Global Trade Item Number) do produto, antigo código EAN ou código de barras[L:cEAN]',
  `descricao` VARCHAR(120) NOT NULL COMMENT 'Descrição do produto ou serviço[L:xProd]',
  `unidade` ENUM('unidade', 'peca', 'metro', 'grama', 'litro') NOT NULL COMMENT 'Unidade do produto, Não informar a grandeza[L:uCom][E:UN|PC|m|g|L]',
  `multiplicador` INT NOT NULL COMMENT '[L:indTot][D][F:1]',
  `peso_liquido` DOUBLE NOT NULL,
  `peso_bruto` DOUBLE NOT NULL,
  `preco` DECIMAL(19,4) NOT NULL COMMENT 'Valor unitário de comercialização  - alterado para aceitar 0 a 10 casas decimais e 11 inteiros[L:vProd]',
  `quantidade` DOUBLE NOT NULL COMMENT 'Quantidade Comercial  do produto, alterado para aceitar de 0 a 4 casas decimais e 11 inteiros.[L:qCom]',
  `desconto` DECIMAL(19,4) NOT NULL COMMENT 'Valor do Desconto[L:vDesc]',
  `cfop` INT NOT NULL COMMENT '[L:CFOP]',
  `ncm` VARCHAR(8) NOT NULL COMMENT 'Código NCM (8 posições), será permitida a informação do gênero (posição do capítulo do NCM) quando a operação não for de comércio exterior (importação/exportação) ou o produto não seja tributado pelo IPI. Em caso de item de serviço ou item que não tenham produto (Ex. transferência de crédito, crédito do ativo imobilizado, etc.), informar o código 00 (zeros) (v2.0)[L:NCM]',
  `cest` VARCHAR(20) NOT NULL COMMENT '[L:CEST]',
  `impostos` INT NOT NULL COMMENT '[D][F:array()][S:S][U:impostos|imposto][L:imposto]')
ENGINE = InnoDB
COMMENT = 'Produto ou serviço que está sendo vendido ou prestado e será adicionado na nota fiscal[L:prod]';


-- -----------------------------------------------------
-- Table `Pessoa`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Pessoa` ;

CREATE TABLE IF NOT EXISTS `Pessoa` (
  `razao_social` VARCHAR(200) NOT NULL COMMENT 'Razão Social ou Nome[L:xNome]',
  `cnpj` VARCHAR(14) NOT NULL COMMENT 'Identificador da pessoa na receita[L:CNPJ]',
  `ie` VARCHAR(20) NOT NULL COMMENT 'Inscrição Estadual[L:IE]',
  `im` VARCHAR(20) NULL COMMENT 'Inscrição Municipal[L:IM]',
  `endereco` INT NOT NULL COMMENT 'Dados do endereço[L:enderEmit][S]',
  `telefone` VARCHAR(20) NULL COMMENT '[L:fone]')
ENGINE = InnoDB
COMMENT = 'Classe base para preenchimento de informações de pessoas físicas e empresas[L:emit]';


-- -----------------------------------------------------
-- Table `Endereco`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Endereco` ;

CREATE TABLE IF NOT EXISTS `Endereco` (
  `pais` VARCHAR(100) NOT NULL DEFAULT 'new Pais()' COMMENT '[L:xPais][S][F:new Pais(array(\'codigo\' => 1058, \'nome\' => \'Brasil\'))]',
  `cep` VARCHAR(8) NOT NULL COMMENT '[L:CEP]',
  `uf` VARCHAR(2) NOT NULL COMMENT '[L:UF]',
  `municipio` VARCHAR(200) NOT NULL DEFAULT 'new Municipio()' COMMENT '[L:xMun][S][F:new Municipio()]',
  `bairro` VARCHAR(200) NOT NULL COMMENT '[L:xBairro]',
  `logradouro` VARCHAR(200) NOT NULL COMMENT '[L:xLgr]',
  `numero` VARCHAR(20) NOT NULL COMMENT '[L:nro]',
  `complemento` VARCHAR(200) NULL COMMENT '[L:xCpl]')
COMMENT = 'Informação de endereço que será informado nos clientes e no emitente[L:enderEmit]';


-- -----------------------------------------------------
-- Table `NFBase`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `NFBase` ;

CREATE TABLE IF NOT EXISTS `NFBase` (
  `id` INT NOT NULL COMMENT '[F:Id]',
  `numero` VARCHAR(45) NOT NULL COMMENT 'Número do Documento Fiscal[L:nNF]',
  `emitente` INT NOT NULL COMMENT '[D][F:new Emitente()][S]',
  `cliente` INT NOT NULL COMMENT '[D][F:new Cliente()][S]',
  `produtos` INT NOT NULL COMMENT '[D][F:array()][S:S][U:produtos|produto]',
  `pagamentos` INT NOT NULL COMMENT '[D][F:array()][S:S][U:pagamentos|pagamento]',
  `consulta_url` VARCHAR(200) NOT NULL,
  `qrcode_data` TEXT NOT NULL,
  `data_saida` DATETIME NOT NULL COMMENT 'Data e Hora da saída da mercadoria / produto',
  `data_entrada` DATETIME NOT NULL COMMENT 'Data e Hora de entrada da mercadoria / produto',
  `modelo` INT NOT NULL COMMENT '[L:mod]',
  `tipo` ENUM('entrada', 'saida') NOT NULL COMMENT 'Tipo do Documento Fiscal (0 - entrada; 1 - saída)[E:0|1][D][F:NFBaseTipo::SAIDA][L:tpNF]',
  `destino` ENUM('interna', 'interestadual', 'exterior') NOT NULL COMMENT 'Identificador de Local de destino da operação (1-Interna;2-Interestadual;3-Exterior)[E:1|2|3][D][F:NFBaseDestino::INTERNA][L:idDest]',
  `natureza` VARCHAR(60) NOT NULL DEFAULT 'VENDA PARA CONSUMIDOR FINAL' COMMENT 'Descrição da Natureza da Operação[L:natOp][F:\'VENDA PARA CONSUMIDOR FINAL\']',
  `codigo` VARCHAR(8) NOT NULL COMMENT 'Código numérico que compõe a Chave de Acesso. Número aleatório gerado pelo emitente para cada NF-e.[L:cNF]',
  `indicador` ENUM('avista', 'aprazo', 'outros') NOT NULL COMMENT 'Indicador da forma de pagamento: 0 – pagamento à vista; 1 – pagamento à prazo; 2 – outros.[E:0|1|2][D][F:NFBaseIndicador::AVISTA][L:indPag]',
  `data_emissao` DATETIME NOT NULL COMMENT 'Data e Hora de emissão do Documento Fiscal[L:dhEmi]',
  `serie` VARCHAR(45) NOT NULL COMMENT 'Série do Documento Fiscal: série normal 0-889, Avulsa Fisco 890-899, SCAN 900-999[L:serie]',
  `formato_impressao` ENUM('nenhuma', 'retrato', 'paisagem', 'simplificado', 'consumidor', 'mensagem') NOT NULL COMMENT 'Formato de impressão do DANFE (0-sem DANFE;1-DANFe Retrato; 2-DANFe Paisagem;3-DANFe Simplificado;4-DANFe NFC-e;5-DANFe NFC-e em mensagem eletrônica)[E:0|1|2|3|4|5][D][F:NFBaseFormatoImpressao::CONSUMIDOR][L:tpImp]',
  `forma_emissao` ENUM('normal', 'contingencia') NOT NULL COMMENT 'Forma de emissão da NF-e[E:1|9][D][F:NFBaseFormaEmissao::NORMAL][L:tpEmis]',
  `digito_verificador` VARCHAR(1) NOT NULL COMMENT 'Digito Verificador da Chave de Acesso da NF-e[L:cDV]',
  `ambiente` ENUM('producao', 'homologacao') NOT NULL COMMENT 'Identificação do Ambiente: 1 - Produção, 2 - Homologação[E:1|2][D][F:NFBaseAmbiente::HOMOLOGACAO][L:tpAmb]',
  `finalidade` ENUM('normal', 'complementar', 'ajuste', 'retorno') NOT NULL COMMENT 'Finalidade da emissão da NF-e: 1 - NFe normal, 2 - NFe complementar, 3 - NFe de ajuste, 4 - Devolução/Retorno[E:1|2|3|4][D][F:NFBaseFinalidade::NORMAL][L:finNFe]',
  `consumidor_final` ENUM('Y', 'N') NOT NULL COMMENT 'Indica operação com consumidor final (0-Não;1-Consumidor Final)[E:1|0][D][F:\'Y\'][L:indFinal]',
  `presenca_comprador` ENUM('nenhum', 'presencial', 'internet', 'teleatendimento', 'entrega', 'outros') NOT NULL COMMENT 'Indicador de presença do comprador no estabelecimento comercial no momento da oepração (0-Não se aplica, ex.: Nota Fiscal complementar ou de ajuste;1-Operação presencial;2-Não presencial, internet;3-Não presencial, teleatendimento;4-NFC-e entrega em domicílio;9-Não presencial, outros)[E:0|1|2|3|4|9][L:indPres]')
ENGINE = InnoDB
COMMENT = 'Classe base para a formação da nota fiscal[L:infNFe]';


-- -----------------------------------------------------
-- Table `NFCe`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `NFCe` ;

CREATE TABLE IF NOT EXISTS `NFCe` (
  `id` INT NOT NULL)
ENGINE = InnoDB
COMMENT = 'Classe para validação da nota fiscal eletrônica do consumidor';


-- -----------------------------------------------------
-- Table `NFe`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `NFe` ;

CREATE TABLE IF NOT EXISTS `NFe` (
  `id` INT NOT NULL)
ENGINE = InnoDB
COMMENT = 'Classe para validação da nota fiscal eletrônica';


-- -----------------------------------------------------
-- Table `Emitente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Emitente` ;

CREATE TABLE IF NOT EXISTS `Emitente` (
  `fantasia` VARCHAR(200) NULL COMMENT 'Nome fantasia do da empresa emitente[L:xFant]',
  `regime` ENUM('simples', 'excesso', 'normal') NOT NULL COMMENT 'Código de Regime Tributário. Este campo será obrigatoriamente preenchido com: 1 – Simples Nacional; 2 – Simples Nacional – excesso de sublimite de receita bruta; 3 – Regime Normal.[L:CRT][D][F:EmitenteRegime::SIMPLES][E:1|2|3]')
ENGINE = InnoDB
COMMENT = 'Empresa que irá emitir as notas fiscais[L:emit]';


-- -----------------------------------------------------
-- Table `SEFAZ`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SEFAZ` ;

CREATE TABLE IF NOT EXISTS `SEFAZ` (
  `notas` INT NOT NULL COMMENT '[D][F:array()][S:S][L:NFe]')
ENGINE = InnoDB
COMMENT = 'Classe que envia uma ou mais notas fiscais para os servidores da sefaz';


-- -----------------------------------------------------
-- Table `Pagamento`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Pagamento` ;

CREATE TABLE IF NOT EXISTS `Pagamento` (
  `forma` ENUM('dinheiro', 'cheque', 'credito', 'debito', 'crediario', 'alimentacao', 'refeicao', 'presente', 'combustivel', 'outros') NOT NULL COMMENT 'Forma de Pagamento:01-Dinheiro;02-Cheque;03-Cartão de Crédito;04-Cartão de Débito;05-Crédito Loja;10-Vale Alimentação;11-Vale Refeição;12-Vale Presente;13-Vale Combustível;99 - Outros[L:tPag][E:01|02|03|04|05|10|11|12|13|99]',
  `valor` DECIMAL(19,4) NOT NULL COMMENT 'Valor do Pagamento[L:vPag]',
  `credenciadora` VARCHAR(14) NOT NULL COMMENT 'CNPJ da credenciadora de cartão de crédito/débito[L:CNPJ]',
  `autorizacao` VARCHAR(100) NOT NULL COMMENT 'Número de autorização da operação cartão de crédito/débito[L:cAut]',
  `bandeira` ENUM('visa', 'mastercard', 'amex', 'sorocred', 'outros') NOT NULL COMMENT 'Bandeira da operadora de cartão de crédito/débito:01–Visa; 02–Mastercard; 03–American Express; 04–Sorocred; 99–Outros[L:tBand][E:01|02|03|04|99]')
ENGINE = InnoDB
COMMENT = '[L:pag]';


-- -----------------------------------------------------
-- Table `NFSe`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `NFSe` ;

CREATE TABLE IF NOT EXISTS `NFSe` (
  `id` INT NOT NULL)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Municipio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Municipio` ;

CREATE TABLE IF NOT EXISTS `Municipio` (
  `codigo` INT NOT NULL COMMENT 'Código do município (utilizar a tabela do IBGE), informar 9999999 para operações com o exterior.[L:cMun]',
  `nome` VARCHAR(200) NOT NULL COMMENT 'Nome do munícipio[L:xMun]')
ENGINE = InnoDB
COMMENT = '[L:municipio]';


-- -----------------------------------------------------
-- Table `Pais`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Pais` ;

CREATE TABLE IF NOT EXISTS `Pais` (
  `codigo` INT NOT NULL COMMENT 'Código do país[L:cPais]',
  `nome` VARCHAR(200) NOT NULL COMMENT 'Nome do país[L:xPais]')
ENGINE = InnoDB
COMMENT = '[L:pais]';


-- -----------------------------------------------------
-- Table `Imposto`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Imposto` ;

CREATE TABLE IF NOT EXISTS `Imposto` (
  `tipo` ENUM('federal', 'estadual', 'municipal', 'todos') NOT NULL COMMENT 'Tipo de imposto[D][F:ImpostoTipo::TODOS]',
  `grupo` ENUM('icms', 'pis', 'cofins', 'ipi') NOT NULL COMMENT 'Grupo do imposto[E:ICMS|PIS|COFINS|IPI]',
  `tributacao` VARCHAR(10) NOT NULL COMMENT 'Código da situação tributária[L:CST]',
  `aliquota` DOUBLE NOT NULL COMMENT 'Porcentagem do imposto',
  `base` DECIMAL(19,4) NOT NULL COMMENT 'Valor base para cálculo do imposto',
  `valor` DECIMAL(19,4) NOT NULL COMMENT 'Calcula o valor do imposto com base na aliquota e valor base')
ENGINE = InnoDB
COMMENT = 'Classe base dos impostos[L:imposto]';


-- -----------------------------------------------------
-- Table `ICMS`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ICMS` ;

CREATE TABLE IF NOT EXISTS `ICMS` (
  `id` INT NOT NULL COMMENT 'Identificador do ICMS, Ex.: ICMS00[L:ICMS]')
ENGINE = InnoDB
COMMENT = 'Imposto sobre compra de mercadoria e prestação de serviços[L:ICMS]';


-- -----------------------------------------------------
-- Table `PIS`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PIS` ;

CREATE TABLE IF NOT EXISTS `PIS` (
  `id` INT NOT NULL)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `COFINS`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COFINS` ;

CREATE TABLE IF NOT EXISTS `COFINS` (
  `id` INT NOT NULL)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `IPI`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IPI` ;

CREATE TABLE IF NOT EXISTS `IPI` (
  `id` INT NOT NULL)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
